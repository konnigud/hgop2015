var should = require('should');

module.exports = function tictactoeCommandHandler(events){
    var gameCreatedEvent = [];

    for(var i = 0; i< events.length; i++){
        var game = {
            gameId: i + 1,
            name:events[i].name,
            playerOne:events[i].playerOne,
            playerTwo:events[i].playerTwo,
            createTimeStamp:events[i].createTimeStamp,
            moves:events[i].moves
        }
        gameCreatedEvent.push(game);
    }


    var handlers = {
        "CreateGame":function(cmd){
            var newGame={
                gameId:gameCreatedEvent.length+1,
                name:cmd.name,
                playerOne:cmd.userName,
                playerTwo:undefined,
                createTimeStamp:cmd.timeStamp,
                moves:[]
            };
            gameCreatedEvent.push(cmd);
            return [{
                id: cmd.id,
                event: "GameCreated",
                userName:cmd.userName,
                timeStamp:cmd.timeStamp,
                game: newGame
            }];
        },
        "JoinGame":function(cmd){
            var joinedGame;
            try {
                joinedGame = getGame(cmd);
            }
            catch(err){
                return err;
            }
            if(joinedGame.playerTwo===undefined) {
                joinedGame.playerTwo = cmd.userName;
                console.log(joinedGame);
                return [{
                    id: cmd.id,
                    event: "GameJoined",
                    userName:cmd.userName,
                    timeStamp:cmd.timeStamp,
                    game:joinedGame
                }];
            }
            return[{
                id:cmd.id,
                event:"GameIsFull",
                gameId:joinedGame.gameId,
                userName:cmd.userName,
                timeStamp:cmd.timeStamp
            }];
        },
        "MakeMove":function(cmd){
            var myGame;
            var event = "MovedMade";
            try {
                myGame = getGame(cmd);
            }
            catch(err){
                return err;
            }
            if(myGame.moves===undefined){
                myGame.moves = [];

            }

            var whosTurn = myGame.moves.length % 2;

            if((whosTurn === 0 && (cmd.userName !== myGame.playerOne))||
               (whosTurn === 1 && (cmd.userName !== myGame.playerTwo))){
                  event = "IllegalMove_NotYourTurn";
            }

            if(event === "MovedMade") {
                myGame.moves.push(cmd.coordinates);
            }

            return [{
                id:cmd.id,
                event:event,
                userName:cmd.userName,
                timeStamp:cmd.timeStamp,
                game: myGame
            }];
        }
    };

    var getGame = function(cmd){
        if(gameCreatedEvent===undefined || cmd.gameId > gameCreatedEvent.length){
            throw [{
                id:cmd.id,
                event:"GameDoesNotExist",
                userName: cmd.userName,
                timeStamp: cmd.timeStamp
            }];
        }
        else {
            var game = gameCreatedEvent[cmd.gameId-1];
            game.gameId = cmd.gameId;
            return game;
        }
    }

    return {
        executeCommand:function(cmd){
            return handlers[cmd.comm](cmd);
        }
    };
}
